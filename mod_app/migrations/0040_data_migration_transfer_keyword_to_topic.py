# Generated by Django 4.2.5 on 2025-06-09 12:28

from django.db import migrations


def transfer_keyword_to_topic(apps, schema_editor):
    Keyword = apps.get_model("mod_app", "Keyword")
    Topic = apps.get_model("mod_app", "Topic")
    Film = apps.get_model("mod_app", "Film")
    Analysis = apps.get_model("mod_app", "Analysis")
    TeachingResources = apps.get_model("mod_app", "TeachingResources")

    # save keyword field data of Film, Analysis, TeachingResources
    film_relationships = {}
    analysis_relationships = {}
    tr_relationships = {}

    for film in Film.objects.all():
        film_relationships[film.id] = [keyword.id for keyword in film.keyword.all()]

    for analysis in Analysis.objects.all():
        analysis_relationships[analysis.id] = [
            keyword.id for keyword in analysis.keywords.all()
        ]

    for tr in TeachingResources.objects.all():
        tr_relationships[tr.id] = [keyword.id for keyword in tr.keywords.all()]

    # Store data of Keyword objects and recreating them as Topic objects
    for keyword in Keyword.objects.all():
        topic_id = keyword.id
        topic_name = keyword.name
        try:
            keyword.delete()
            Topic.objects.create(id=topic_id, name=topic_name, is_genre=False)
        except Exception as e:
            print(e)

    # Recreate existing keyword relationship as topics in Film, Analysis, Teaching Resources
    for film_id, keyword_ids in film_relationships.items():
        film = Film.objects.get(id=film_id)
        for keyword_id in keyword_ids:
            topic = Topic.objects.get(id=keyword_id)
            film.topic.add(topic)

    for analysis_id, keyword_ids in analysis_relationships.items():
        analysis = Analysis.objects.get(id=analysis_id)
        for keyword_id in keyword_ids:
            topic = Topic.objects.get(id=keyword_id)
            analysis.topics.add(topic)

    for tr_id, keyword_ids in tr_relationships.items():
        tr = TeachingResources.objects.get(id=tr_id)
        for keyword_id in keyword_ids:
            topic = Topic.objects.get(id=keyword_id)
            tr.topics.add(topic)


class Migration(migrations.Migration):
    dependencies = [
        ("mod_app", "0039_add_topic_field_to_Film"),
    ]

    operations = [
        migrations.RunPython(
            transfer_keyword_to_topic, reverse_code=migrations.RunPython.noop
        )
    ]
