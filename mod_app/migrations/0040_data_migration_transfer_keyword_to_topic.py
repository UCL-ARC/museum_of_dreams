# Generated by Django 4.2.5 on 2025-06-09 12:28

from django.db import migrations


class Migration(migrations.Migration):
    def transfer_keyword_to_topic(apps, schema_editor):
        Keyword = apps.get_model("mod_app", "Keyword")
        Topic = apps.get_model("mod_app", "Topic")
        Film = apps.get_model("mod_app", "Film")
        Analysis = apps.get_model("mod_app", "Analysis")
        TeachingResources = apps.get_model("mod_app", "TeachingResources")

        # save a dict of a list of keyword id
        film_relationships = {}
        analysis_relationships = {}
        tr_relationships = {}

        for film in Film.objects.all():
            film_id = film.id
            keywords = film.keyword.all()
            film_keyword_ids = [keyword.id for keyword in keywords]

            try:
                film_relationships[film_id] = film_keyword_ids
            except KeyError as e:
                print(e)

        for analysis in Analysis.objects.all():
            analysis_id = analysis.id
            keywords = analysis.keywords.all()
            analysis_keyword_ids = [keyword.id for keyword in keywords]
            analysis_relationships[analysis_id] = analysis_keyword_ids

        for tr in TeachingResources.objects.all():
            tr_id = tr.id
            keywords = tr.keywords.all()
            tr_keyword_ids = [keyword.id for keyword in keywords]
            tr_relationships[tr_id] = tr_keyword_ids

        for keyword in Keyword.objects.all():
            base_id = keyword.id
            base_name = keyword.name

            try:
                keyword.delete()
                Topic.objects.create(id=base_id, name=base_name, is_genre=False)
            except Exception as e:
                print(e)

        for film_id, keyword_ids in film_relationships.items():
            film = Film.objects.get(id=film_id)
            print(film.id)
            for keyword_id in keyword_ids:
                topic = Topic.objects.get(id=keyword_id)
                film.topic.add(topic)

            # for analysis in Analysis.objects.prefetch_related("keyword").all():
            # create entry in the topic field of analysis based

            # for tr in TeachingResources.objects.prefetch_related("keyword").all():

    dependencies = [
        ("mod_app", "0039_add_topic_field_to_Film"),
    ]

    operations = [
        migrations.RunPython(
            transfer_keyword_to_topic, reverse_code=migrations.RunPython.noop
        )
    ]
